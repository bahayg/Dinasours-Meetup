{"ast":null,"code":"var _jsxFileName = \"/Users/bahaygulle/Development/code/In-It-Together/c4_useEffect/src/components/ApiExample.js\";\nimport React, { useEffect, useState } from \"react\";\nimport './pokemon.js'; // for the pokemon section of the API docs check out:\n//   https://pokeapi.co/docs/v2#pokemon\n// for information on how the query parameters (/?limit=30) were written:\n//   https://pokeapi.co/docs/v2#resource-listspagination-section\n\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon/?limit=30\";\n\nconst ApiExample = () => {\n  // creating state to hold the API results\n  const [pokemonList, setPokemonList] = useState([]); // useEffect to handle API call side effects\n\n  useEffect(() => {\n    console.log(\"Running useEffect\");\n    fetch(API_URL) // using JS fetch with our Pokemon API URL\n    .then(resp => resp.json()) // take the API response and turn it into JSON\n    .then(json => {\n      setPokemonList(json.results); // grab the results array from it and set state\n    });\n  }, []);\n  /* SPECIAL NOTE: the second argument in useEffect, the dependency array [],\n   tracks values (ONLY props/state) and if those values change between renders, \n   useEffect is ran again. */\n\n  console.log(\"I am being rendered\"); // -------------- RENDER ------------------\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, pokemonList.map(pokemon => /*#__PURE__*/React.createElement(\"div\", {\n    key: pokemon.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, pokemon.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, pokemon.url))));\n};\n\nexport default ApiExample;","map":{"version":3,"sources":["/Users/bahaygulle/Development/code/In-It-Together/c4_useEffect/src/components/ApiExample.js"],"names":["React","useEffect","useState","API_URL","ApiExample","pokemonList","setPokemonList","console","log","fetch","then","resp","json","results","map","pokemon","name","url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,cAAP,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,6CAAhB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAFuB,CAIvB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,IAAAA,KAAK,CAACN,OAAD,CAAL,CAAe;AAAf,KACGO,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAC6B;AAD7B,KAEGF,IAFH,CAEQE,IAAI,IAAI;AACZN,MAAAA,cAAc,CAACM,IAAI,CAACC,OAAN,CAAd,CADY,CACkB;AAC/B,KAJH;AAKD,GAPQ,EAON,EAPM,CAAT;AAQA;;;;AAIAN,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAjBuB,CAmBvB;;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,WAAW,CAACS,GAAZ,CAAgBC,OAAO,iBACtB;AAAK,IAAA,GAAG,EAAEA,OAAO,CAACC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,OAAO,CAACC,IAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,OAAO,CAACE,GAAZ,CAFF,CADD,CADH,CADF;AAUD,CA9BD;;AAgCA,eAAeb,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './pokemon.js'\n\n// for the pokemon section of the API docs check out:\n//   https://pokeapi.co/docs/v2#pokemon\n// for information on how the query parameters (/?limit=30) were written:\n//   https://pokeapi.co/docs/v2#resource-listspagination-section\n\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon/?limit=30\";\n\nconst ApiExample = () => {\n  // creating state to hold the API results\n  const [pokemonList, setPokemonList] = useState([]);\n\n  // useEffect to handle API call side effects\n  useEffect(() => {\n    console.log(\"Running useEffect\");\n    fetch(API_URL) // using JS fetch with our Pokemon API URL\n      .then(resp => resp.json()) // take the API response and turn it into JSON\n      .then(json => {\n        setPokemonList(json.results); // grab the results array from it and set state\n      });\n  }, []);\n  /* SPECIAL NOTE: the second argument in useEffect, the dependency array [],\n   tracks values (ONLY props/state) and if those values change between renders, \n   useEffect is ran again. */\n\n  console.log(\"I am being rendered\");\n\n  // -------------- RENDER ------------------\n  return (\n    <div>\n      {pokemonList.map(pokemon => (\n        <div key={pokemon.name}>\n          <p>{pokemon.name}</p>\n          <p>{pokemon.url}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ApiExample;\n"]},"metadata":{},"sourceType":"module"}